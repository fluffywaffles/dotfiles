# TRUE COLOR
# https://sunaku.github.io/tmux-23bit-color.html#usage
# This setup obsoletes `set -g default-terminal "screen-256color"`
set-option -ga terminal-overrides ",xterm-256color:Tc"
set -g default-terminal "tmux-256color"

# Cursor shape forwarding overrides.
# https://github.com/neovim/neovim/wiki/FAQ#how-can-i-change-the-cursor-shape-in-the-terminal
# Tell tmux to forward cursor shape escape sequences. Otherwise, it captures them.
set -ga terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'

# Use zsh.
set-option -g default-shell /bin/zsh

# Vi mode, and mouse mode, by default.
set -g status-keys vi
setw -g mode-keys vi
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-cancel "xclip -sel clip"
bind-key -T copy-mode-vi 'V' send -X rectangle-toggle
setw -g mouse on

# Notify me what windows currently are doing things.
setw -g monitor-activity on

## Key bindings (must come after plugin install).
# Make it easy to reload tmux config.
bind r source-file ~/.tmux.conf \; display "Reloaded ~/.tmux.conf!"

# Use C-a not C-b as prefix.
unbind C-b
set -g prefix C-a
# Press C-a again to actually use C-a! Very nice.
bind C-a send-prefix

# Resize panes with capital vim keys.
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

bind -n M-- select-layout even-horizontal
bind -n M-= select-layout even-vertical

bind C-s split-window -hc "#{pane_current_path}"
bind C-w split-window -vc "#{pane_current_path}"

bind b set-option status

# Theme (Taken from https://github.com/dkeg/dots/blob/master/tmux.conf).
# Codepoints: · 00b7
setw -g window-status-format "#[bg=colour0]#[fg=colour3] · #[bg=colour0]#[fg=colour8] #W  "
setw -g window-status-current-format "#[bg=colour0]#[fg=colour2] · #[bg=colour0]#[fg=colour7] #W  "
setw -g window-status-current-attr dim
set -g status-bg "#43d08a" # This color comes from vim-two-firewatch.
set -g status-fg default
set -g status-position bottom
set -g status-justify right
set -g status-left ' '
set -g status-right ' '

# (Actually) Seamless navigation between tmux panes and vim splits
# NOTE: See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
# Update: wrap to the logical relative vim window (so long as there are < 1000)
left_rightmost="select-pane -L \; send-keys 999 C-w l"
right_leftmost="select-pane -R \; send-keys 999 C-w h"
down_topmost="select-pane -D \; send-keys C-w C-t"
up_bottommost="select-pane -U \; send-keys C-w C-b"
# Nesting `if-shell` is a daunting undertaking. History remembers not fondly
# those careless if-shellers who do not rightly escape their commands... Seek
# truth in the man-pages, or ye shall die of Stack Overflow!
bind -r C-h \
    if-shell "$is_vim" "send-keys C-a C-h" \
    'if-shell -t .{left-of} "$is_vim" "$left_rightmost" "select-pane -L"'
bind -r C-j \
    if-shell "$is_vim" "send-keys C-a C-j" \
    'if-shell -t .{down-of} "$is_vim" "$down_topmost" "select-pane -D"'
bind -r C-k \
    if-shell "$is_vim" "send-keys C-a C-k" \
    'if-shell -t .{up-of} "$is_vim" "$up_bottommost" "select-pane -U"'
bind -r C-l \
    if-shell "$is_vim" "send-keys C-a C-l" \
    'if-shell -t .{right-of} "$is_vim" "$right_leftmost" "select-pane -R"'
# NOTE: for the above to work, there must be corresponding keybindings in vim.
# vim-tmux-navigator makes this pretty easy. Hook into the <C-a><C-{hjkl}>
# sequences that get passed along here in the first branchs' send-keys commands.

# Shortcuts for editing configuration.
bind M-v neww -n nvimconf "nvim ~/.config/nvim/init.vim"
bind M-t neww -n tmuxconf "nvim ~/.tmux.conf"
bind M-s neww -n tmuxconf "nvim ~/.config/sxhkd/sxhkdrc"

# Don't wait 500ms before sending keys on to other programs! Otherwise <ESC> is slow in vim.
set -sg escape-time 0
