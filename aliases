# vim: ft=zsh
alias ta='tmux attach'
alias pdf='mupdf'
alias open='xdg-open'
alias clip='xclip -sel clip'
#alias clip='pbcopy' # OS X
alias red="redshift"
alias vim='nvim'
alias svim='sudo -EP nvim'
alias clock="date +'%A %r'"
alias super='sudo -EPS' # upgrades current shell + env to superuser

alias l='ls -1'
alias ll='ls -lh'
alias la='ls -1A' # use -A not -a so that . and .. are omitted
alias lla='ls -lAh'

alias dd='dd status=progress'

alias mkpw="head -c512 /dev/urandom | sha512sum | cut -d' ' -f1"

#
# scanning with scanimage (SANE)
#
# scan image, resize to lower ppi, convert to pdf
#
function scanpdf () {(
  emulate -L zsh -e
  if [[ $# -lt 1 ]]; then
    echo $#
    >&2 printf 'ERR: missing: why no name for out pls?\n'
    return 1
  fi
  name="${1%%.pdf}"  # quoted: allow spaces in name
  ppi=50; if [[ ${2} =~ "ppi=\d*" ]]; then
    ppi=(${(s:=:)ppi}) # convert to array splitting on '='
    ppi=${ppi[2]}      # select the number on right-hand side of '='
  elif [[ -n ${2} ]]; then
    >&2 printf 'ERR: bad arg: why u give bad ppi=N ??\n'
    return 1
  fi
  # intermediary files
  raw_pnm="${name}-raw.pnm"
  ppi_pnm="${name}-${ppi}ppi.pnm"
  intermediary_files=("${raw_pnm}" "${ppi_pnm}")
  # output file
  final_pdf="${name}.pdf"
  # scan, redraw, convert, clean up
  printf '◆ scan            (subsh)»  '
  (set -x; scanimage --format=pnm > "${raw_pnm}")
  printf '◆ redraw          (subsh)»  '
  (set -x; mutool draw -r "${ppi}" -o "${ppi_pnm}" "${raw_pnm}")
  printf '◆ convert to pdf  (subsh)»  '
  (set -x; mutool convert -O compress -o "${final_pdf}" "${ppi_pnm}")
  printf '◆ cleaning up     (subsh)»  '
  (set -x; rm "${intermediary_files[@]}")
)}

#
# zg
#
# z within the current git repository
#
function zg () {
  local root=$(git rev-parse --show-toplevel)
  [[ -n ${root} ]] && 2>&1 _z ${root} ${@}
}

#
# the long git section
#

function git-branch-current () {(
  #
  # returns the currently checked-out branch name at HEAD
  #
  set -e
  git rev-parse --abbrev-ref HEAD
)}

function git-push-set-upstream-branch-current () {(
  #
  # pushes the current branch to origin, setting upsteam to branch name
  #
  set -ex
  local branch=$(git rev-parse --abbrev-ref HEAD) # git-branch-current
  git push origin --set-upstream ${branch}
)}

function git-pull-rebase-then-force-with-lease-includes () {(
  #
  # rebase given remote branch ($1) into current branch and then force-push
  # to given remote branch ($2) with lease. remote can be configured as a
  # variable, as in:
  #
  #   remote=xyz glop
  #
  # positional arguments default to the currently checked-out branch.
  #   $1 allows rebasing a different remote branch into the current branch
  #   $2 allows force-pushing-with-lease to a different remote branch
  # the use-case for using both arguments seems far-fetched, overall. most
  # usages will just be `glop` or `glop master`.
  #
  set -ex
  local branch=$(git rev-parse --abbrev-ref HEAD) # git-branch-current
  local remote=${remote:-origin}
  git pull --rebase ${remote} ${1:-${branch}}
  git push --force-with-lease --force-if-includes ${remote} ${2:-${branch}}
)}

#
# shell aliases for custom git functions
#
alias gbc='git-branch-current'
alias gpu='git-push-set-upstream-branch-current'
alias glop='git-pull-rebase-then-force-with-lease-includes'
alias glomp='git-pull-rebase-then-force-with-lease-includes master'

#
# shell aliases for common git commands
#
alias g='git'
alias ga='git add'
alias gb='git branch'
alias gc='git commit --verbose'
alias gd='git diff'
alias gf='git fetch'
alias gl='git pull'
alias gm='git merge --ff-only'
alias gp='git push'
alias gr='git rebase'
alias gc!='git commit --verbose --amend'
alias gp!='git push --force'
alias gco='git checkout'
alias gfa='git fetch --all'
alias gsh='git show'
alias gst='git status'
alias gwd='git diff --word-diff=color'
alias glog='git log --oneline --decorate --graph'
alias glom='git pull --rebase origin master'
alias gloga='git log --oneline --decorate --graph --all'

#
# HOST-specific aliases [if any]
#
if [[ -s ~/.aliases.${HOST} ]]; then
  source ~/.aliases.${HOST}
fi
