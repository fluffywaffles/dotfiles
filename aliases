# vim: ft=zsh
alias ta='tmux attach'
alias pdf='mupdf'
alias open='xdg-open'
alias clip='xclip -sel clip'
#alias clip='pbcopy' # OS X
alias red="redshift"
alias vim='nvim'
alias svim='sudo -EP nvim'
alias clock="date +'%A %r'"
alias super='sudo -EPS' # upgrades current shell + env to superuser

alias l='ls -1'
alias ll='ls -lh'
alias la='ls -1A' # use -A not -a so that . and .. are omitted
alias lla='ls -lAh'

alias dd='dd status=progress'

alias mkpw="head -c512 /dev/urandom | sha512sum | cut -d' ' -f1"

alias ncgrep='grep --color=never'

#
# scanpdf
#
# use scanimage (SANE) to scan image, resize to lower ppi, convert to pdf,
# and output to target (${1}).
#
# ppi can be configured as an argument, as in:
#   scanpdf out.pdf ppi=100
# or as an environment variable, as in:
#   ppi=100 scanpdf out.pdf
#
function scanpdf () {(
  setopt err_exit
  if [[ $# -lt 1 ]]; then
    echo $#
    >&2 printf 'ERR: missing: why no name for out pls?\n'
    return 1
  fi
  name="${1%%.pdf}"  # quoted: allow spaces in name
  ppi=${ppi:-50}; if [[ ${2} =~ "ppi=\d*" ]]; then
    ppi=(${(s:=:)2}) # convert to array splitting on '='
    ppi=${ppi[2]}    # select the number on right-hand side of '='
  elif [[ -n ${2} ]]; then
    >&2 printf 'ERR: bad arg: why u give bad ppi=N ??\n'
    return 1
  fi
  # intermediary files
  raw_pnm="${name}-raw.pnm"
  ppi_pnm="${name}-${ppi}ppi.pnm"
  intermediary_files=("${raw_pnm}" "${ppi_pnm}")
  # output file
  final_pdf="${name}.pdf"
  # scan, redraw, convert, clean up
  printf '◆ scan            (subsh)»  '
  (set -x; scanimage --format=pnm > "${raw_pnm}")
  printf '◆ redraw          (subsh)»  '
  (set -x; mutool draw -r "${ppi}" -o "${ppi_pnm}" "${raw_pnm}")
  printf '◆ convert to pdf  (subsh)»  '
  (set -x; mutool convert -O compress -o "${final_pdf}" "${ppi_pnm}")
  printf '◆ cleaning up     (subsh)»  '
  (set -x; rm "${intermediary_files[@]}")
)}

#
# zg
#
# z within the current git repository
#
function zg () {
  local root=$(git rev-parse --show-toplevel)
  [[ -n ${root} ]] && 2>&1 _z ${root} ${@}
}

#-------------------------------------------------------------------------
# the long git section
#-------------------------------------------------------------------------

#
# git-branch-current
#
# returns the local ref name for the currently checked-out HEAD
#
function git-branch-current () {(
  setopt err_exit
  git rev-parse --abbrev-ref HEAD
)}

#
# git-branch-upstream
#
# returns the remote ref name for the upstream configured for HEAD
#
function git-branch-upstream () {(
  setopt err_exit
  git rev-parse --abbrev-ref HEAD@{u}
)}

#
# git-push-set-upstream-branch-current
#
# pushes the current HEAD to a remote branch (${1}), setting upsteam to
# the remote branch (${1}). remote can be configured as a variable, as in:
#
#   remote=xyz gpu
#
# the positional argument for remote branch defaults to the current branch
# name; so, without arguments, this creates the local branch if it does
# not exist at the remote.
#
function git-push-set-upstream-branch-current () {(
  setopt err_exit
  local branch=$(git rev-parse --abbrev-ref HEAD) # git-branch-current
  local remote=${remote:-origin}
  local remote_branch=${1:-${branch}}
  setopt xtrace
  git push ${remote} --set-upstream ${remote_branch}
)}

#
# git-pull-rebase-origin-main
#
# rebase remote branch (${1}) from remote (${remote}) into the currently
# checked-out HEAD. remote can be configured as a variable, as in:
#
#   remote=xyz glom
#
# the positional argument defaults to the configured default branch name;
# that is:
#
#   git config init.defaultbranch
#
# this is often 'master', but can be altered in ${HOME}/.gitconfig.
#
function git-pull-rebase-origin-main () {(
  setopt err_exit
  local branch=${1:-$(git config init.defaultbranch)}
  local remote=${remote:-origin}
  setopt xtrace
  git pull --rebase ${remote} ${branch}
)}

#
# git-pull-rebase-then-force-push-origin-with-lease-includes
#
# rebase given upstream branch (${1}) into current branch and then
# force-push to given downstream branch (${2}) with lease. upstream and
# downstream default to the remotes for HEAD@{upstream} and HEAD@{push}
# respectively. these can be configured as variables, like so:
#
#   upstream=upstream downstream=production glop
#
#     pulls from upstream/{upstream-branch}
#     pushes to production/{downstream-branch}
#
# technically, the upstream and downstream can customize the branches too:
#
#   upstream=origin/main downstream=fork/trunk glop
#
#     pulls from origin/main into current HEAD
#     pushes to fork/trunk with current HEAD
#
# positional arguments default to the currently checked-out HEAD.
#   ${1} selects a different upstream branch to rebase into HEAD
#   ${2} selects a different downstream branch to force-push-with-lease
#
# note that the positional branches supersede branch names given by the
# upstream and downstream variables, if any.
#
# the typical use-case is:
#   glop main
#
# this pulls-with-rebase from the upstream mainline branch, then
# force-pushes to the downstream branch for HEAD.
#
# typically, the upstream downstream are the same, and so:
#   glop main
# is the same as:
#   git pull --rebase origin main && git push --force-with-lease --force-if-includes
#
function git-pull-rebase-then-force-push-origin-with-lease-includes () {(
  setopt err_exit
  # parse upstream (pull target)
  local upstream=${upstream:-$(git rev-parse --abbrev-ref HEAD@{upstream})}
  local upstream_remote upstream_branch
  if [[ ${upstream} =~ [[:alnum:]]+/[[:alnum:]]+ ]]; then
    upstream=(${(s:/:)upstream})
    upstream_remote=${upstream[1]}
    upstream_branch=${(j:/:)upstream[2,-1]}
  fi
  # parse downstream (push target)
  local downstream=${downstream:-$(git rev-parse --abbrev-ref HEAD@{push})}
  local downstream_remote downstream_branch
  if [[ ${downstream} =~ [[:alnum:]]+/[[:alnum:]]+ ]]; then
    downstream=(${(s:/:)downstream})
    downstream_remote=${downstream[1]}
    downstream_branch=${(j:/:)downstream[2,-1]}
  fi
  #
  # now we have our default upstream / downstream; customize with args
  #
  local pull_branch=${1:-${upstream_branch}}
  local push_branch=${2:-${downstream_branch}}
  setopt xtrace
  git pull --rebase ${upstream_remote} ${pull_branch}
  git push --force-with-lease --force-if-includes ${downstream_remote} ${push_branch}
)}

#
# git-push-current-branch
#
# push the currently checked-out HEAD to remote branch (${1}). remote can
# be configured as a variable, as in:
#
#   remote=xyz gpc
#
# supports passthrough flags, as in:
#
#   gpc --force-with-lease --force-if-includes
#
# the positional argument defaults to the current branch name.
#
# providing a different branch name does not change the local branch name,
# nor does it set an upstream; it just pushes to that name, on the remote.
#
function git-push-current-branch () {(
  setopt err_exit
  local flags=() match mbegin mend
  while [[ ${1} =~ ^(-+[-[:alnum:]]+)$ ]]; do shift; flags+=(${match}); done
  local branch=$(git rev-parse --abbrev-ref HEAD) # git-branch-current
  # named arguments
  local remote=${remote:-origin}
  # positional arguments
  local remote_branch=${1:-${branch}}
  setopt xtrace
  git push ${flags[@]} ${remote} ${branch}:${remote_branch}
)}

#
# git-cd-toplevel
#
# change directory into the top-level directory of the current git repo.
#
function git-cd-toplevel () {
  local root=$(git rev-parse --show-toplevel)
  [[ -n "${root}" ]] && cd ${root}
}


#
# shell aliases for custom git functions
#
alias grt='git-cd-toplevel'
alias gbc='git-branch-current'
alias gpu='git-push-set-upstream-branch-current'
alias gpc='git-push-current-branch'
alias gpf='git-push-current-branch --force-with-lease --force-if-includes'
alias glom='git-pull-rebase-origin-main'
alias glop='git-pull-rebase-then-force-push-origin-with-lease-includes'

#
# shell aliases for common git commands
#
alias g='git'
alias ga='git add'
alias gb='git branch'
alias gc='git commit --verbose'
alias gd='git diff'
alias gf='git fetch'
alias gl='git pull'
alias gm='git merge --ff-only'
alias gp='git push'
alias gr='git rebase'
alias gs='git show'
alias gco='git checkout'
alias gfa='git fetch --all'
alias gst='git status'
alias gsq='git rebase --interactive --autosquash'
alias gdc='git diff --word-diff=color'
alias glog='git log --oneline --decorate --graph'
alias gloga='git log --oneline --decorate --graph --all'

#
# worktree setup aliases
#
alias gwa='git worktree add'
alias gwl='git worktree list'
alias gwm='git worktree move'
alias gwrm='git worktree remove'

#
# HOST-specific aliases [if any]
#
if [[ -s ~/.aliases.${HOST} ]]; then
  source ~/.aliases.${HOST}
fi
